{"version":3,"sources":["api/starWarsPlanets.js","context/PlanetFinderContext.jsx","features/components/PlanetTable.jsx","features/components/FilterByName.jsx","features/components/FilterByNumericValues.jsx","features/components/FilterButtons.jsx","features/PlanetFinder.jsx","App.js","index.js"],"names":["fetchPlanets","a","fetch","response","json","PlanetFinderContext","createContext","PlanetFinderProvider","children","FILTER_COLUMN","useState","filteredColumns","setFilteredColumns","initialPlanets","setInitialPlanets","filteredPlanets","setFilteredPlanets","name","setName","filterByNumericValues","setFilterByNumericValues","column","setColumn","comparison","setComparison","value","setValue","useEffect","results","getPlanets","filter","planet","planetName","toLowerCase","includes","columns","map","updatedColumns","planets","forEach","element","parseInt","providerValue","numericValues","filters","filterByName","setters","Provider","PlanetTable","useContext","key","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","FilterByName","data-testid","type","placeholder","onChange","e","target","FilterByNumericValues","option","onClick","FilterButtons","updatedFilter","handleClick","PlanetFinder","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9724aae3.chunk.js","sourcesContent":["const fetchPlanets = async () => {\n  const response = await fetch(\n    'https://swapi-trybe.herokuapp.com/api/planets/',\n  );\n  return response.json();\n};\n\nexport default fetchPlanets;\n","/* eslint-disable react-hooks/exhaustive-deps */\n// ReferÃªncia 01: Filtro para updatedColumns.\n// src: https://stackoverflow.com/a/19957433\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport fetchPlanets from '../api/starWarsPlanets';\n\nexport const PlanetFinderContext = createContext();\n\nexport default function PlanetFinderProvider({ children }) {\n  const FILTER_COLUMN = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const [filteredColumns, setFilteredColumns] = useState(FILTER_COLUMN);\n  const [initialPlanets, setInitialPlanets] = useState([]);\n  const [filteredPlanets, setFilteredPlanets] = useState(initialPlanets);\n  const [name, setName] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState('100000');\n\n  useEffect(() => {\n    const getPlanets = async () => {\n      const response = await fetchPlanets();\n      setInitialPlanets(response.results);\n      setFilteredPlanets(response.results);\n    };\n    getPlanets();\n  }, []);\n\n  useEffect(() => {\n    setFilteredPlanets(\n      initialPlanets.filter((planet) => {\n        const planetName = planet.name.toLowerCase();\n        const filter = name.toLowerCase();\n        return planetName.includes(filter);\n      }),\n    );\n  }, [name]);\n\n  useEffect(() => {\n    const columns = filterByNumericValues.map((filter) => filter.column);\n    const updatedColumns = FILTER_COLUMN.filter(\n      (filter) => !columns.includes(filter),\n    );\n    setFilteredColumns(updatedColumns);\n  }, [filterByNumericValues]);\n\n  useEffect(() => {\n    setColumn(filteredColumns[0]);\n  }, [filteredColumns]);\n\n  useEffect(() => {\n    let planets = initialPlanets;\n    filterByNumericValues.forEach((element) => {\n      switch (element.comparison) {\n      case 'maior que':\n        planets = planets.filter(\n          (planet) => parseInt(planet[element.column], 10) > element.value,\n        );\n        break;\n      case 'menor que':\n        planets = planets.filter(\n          (planet) => parseInt(planet[element.column], 10) < element.value,\n        );\n        break;\n      case 'igual a':\n        planets = planets.filter(\n          (planet) => planet[element.column] === element.value,\n        );\n        break;\n      default:\n        break;\n      }\n    });\n    setFilteredPlanets(planets);\n  }, [filterByNumericValues]);\n\n  const providerValue = {\n    planets: filteredPlanets,\n    columns: filteredColumns,\n    numericValues: { column, comparison, value },\n    filters: { filterByName: { name }, filterByNumericValues },\n    setters: {\n      setName,\n      setFilterByNumericValues,\n      setColumn,\n      setComparison,\n      setValue,\n    },\n  };\n\n  return (\n    <PlanetFinderContext.Provider value={ providerValue }>\n      {children}\n    </PlanetFinderContext.Provider>\n  );\n}\n\nPlanetFinderProvider.propTypes = {\n  children: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","import React, { useContext } from 'react';\nimport { PlanetFinderContext } from '../../context/PlanetFinderContext';\n\nexport default function PlanetTable() {\n  const { planets } = useContext(PlanetFinderContext);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Rotation Period</th>\n          <th>Orbital Period</th>\n          <th>Diameter</th>\n          <th>Climate</th>\n          <th>Gravity</th>\n          <th>Terrain</th>\n          <th>Surface Water</th>\n          <th>Population</th>\n          <th>Films</th>\n          <th>Created</th>\n          <th>Edited</th>\n          <th>URL</th>\n        </tr>\n      </thead>\n      <tbody>\n        {planets.map((planet) => (\n          <tr key={ planet.name }>\n            <td>{planet.name}</td>\n            <td>{planet.rotation_period}</td>\n            <td>{planet.orbital_period}</td>\n            <td>{planet.diameter}</td>\n            <td>{planet.climate}</td>\n            <td>{planet.gravity}</td>\n            <td>{planet.terrain}</td>\n            <td>{planet.surface_water}</td>\n            <td>{planet.population}</td>\n            <td>{planet.films}</td>\n            <td>{planet.created}</td>\n            <td>{planet.edited}</td>\n            <td>{planet.url}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import React, { useContext } from 'react';\nimport { PlanetFinderContext } from '../../context/PlanetFinderContext';\n\nexport default function FilterByName() {\n  const {\n    filters: { FilterByName: name },\n    setters: { setName },\n  } = useContext(PlanetFinderContext);\n\n  return (\n    <fieldset>\n      <input\n        data-testid=\"name-filter\"\n        type=\"text\"\n        placeholder=\"Filtrar por nome\"\n        value={ name }\n        onChange={ (e) => setName(e.target.value) }\n      />\n    </fieldset>\n  );\n}\n","import React, { useContext } from 'react';\nimport { PlanetFinderContext } from '../../context/PlanetFinderContext';\n\nexport default function FilterByNumericValues() {\n  const {\n    columns,\n    numericValues: { column, comparison, value },\n    filters: { filterByNumericValues },\n    setters: { setFilterByNumericValues, setColumn, setComparison, setValue },\n  } = useContext(PlanetFinderContext);\n\n  const handleClick = () => {\n    setFilterByNumericValues([\n      ...filterByNumericValues,\n      { column, comparison, value },\n    ]);\n  };\n\n  return (\n    <fieldset>\n      <select\n        data-testid=\"column-filter\"\n        name=\"column\"\n        value={ column }\n        onChange={ (e) => setColumn(e.target.value) }\n      >\n        {columns.map((option) => (\n          <option key={ option } value={ option }>\n            {option}\n          </option>\n        ))}\n      </select>\n      <select\n        data-testid=\"comparison-filter\"\n        name=\"comparison\"\n        value={ comparison }\n        onChange={ (e) => setComparison(e.target.value) }\n      >\n        <option value=\"maior que\">maior que</option>\n        <option value=\"menor que\">menor que</option>\n        <option value=\"igual a\">igual a</option>\n      </select>\n      <input\n        type=\"number\"\n        data-testid=\"value-filter\"\n        name=\"value\"\n        value={ value }\n        onChange={ (e) => setValue(e.target.value) }\n      />\n      <button data-testid=\"button-filter\" type=\"button\" onClick={ handleClick }>\n        Filtrar\n      </button>\n    </fieldset>\n  );\n}\n","import React, { useContext } from 'react';\nimport { PlanetFinderContext } from '../../context/PlanetFinderContext';\n\nexport default function FilterButtons() {\n  const {\n    filters: { filterByNumericValues },\n    setters: { setFilterByNumericValues },\n  } = useContext(PlanetFinderContext);\n\n  const handleClick = (column) => {\n    const updatedFilter = filterByNumericValues.filter(\n      (filter) => filter.column !== column,\n    );\n    setFilterByNumericValues(updatedFilter);\n  };\n\n  return (\n    <div>\n      {filterByNumericValues.map(({ column, comparison, value }) => (\n        <span data-testid=\"filter\" key={ `${column} ${comparison} ${value}` }>\n          {`${column} ${comparison} ${value}`}\n          <button type=\"button\" onClick={ () => handleClick(column) }>\n            X\n          </button>\n        </span>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport PlanetTable from './components/PlanetTable';\nimport FilterByName from './components/FilterByName';\nimport FilterByNumericValues from './components/FilterByNumericValues';\nimport FilterButtons from './components/FilterButtons';\nimport './PlanetFinder.css';\n\nexport default function PlanetFinder() {\n  return (\n    <>\n      <header>\n        <h1>Projeto Star Wars - Trybe</h1>\n        <FilterByName />\n        <FilterByNumericValues />\n        <FilterButtons />\n      </header>\n      <main>\n        <PlanetTable />\n      </main>\n    </>\n  );\n}\n","import React from 'react';\nimport PlanetFinderProvider from './context/PlanetFinderContext';\nimport PlanetFinder from './features/PlanetFinder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PlanetFinderProvider>\n        <PlanetFinder />\n      </PlanetFinderProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}